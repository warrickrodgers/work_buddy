datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id Int @id @default(autoincrement())
    email String @unique
    first_name String
    last_name String
    created_at DateTime
    last_login DateTime
    job_title String
    company String
    password_hash String
    auth_method String
    problem_request ProblemRequest[]
    insight_feedback InsightFeedback[]
}

model ProblemRequest {
    id Int @id @default(autoincrement())
    user User @relation(fields: [user_id], references: [id])
    user_id Int
    role_description String
    problem_description String
    problem_parameters String
    problem_insights String
    solution_summary String
    problem_data DataUpload?
    created_at DateTime
    processed_at DateTime
    status Status
    metric_temp MetricTemplate?
}


model DataUpload {
    id Int @id @default(autoincrement())
    problem_request ProblemRequest @relation(fields: [problem_request_id], references: [id])
    problem_request_id Int @unique
    file_url String
    filename String
    source_type String
    uploaded_at DateTime
    data_analasys_result DataAnalysisResult?
}

model DataAnalysisResult {
    id Int @id @default(autoincrement())
    data_upload DataUpload @relation(fields: [data_upload_id], references: [id])
    data_upload_id Int @unique
    summary String
    inferred_schema Json
    outliers_found String[]
    metrics_highlighted String[]
    analysed_at DateTime
}

model InsightFeedback {
    id Int @id @default(autoincrement())
    user User @relation(fields: [user_id], references: [id])
    user_id Int
    rating Int
    comment String
}

model MetricTemplate {
    id Int @id @default(autoincrement())
    problem_request ProblemRequest @relation(fields: [problem_request_id], references: [id])
    problem_request_id Int @unique
    name String
    description String
    source Int
    metric_type String
}

enum Status {
    PENDING
    PROCESSING
    DONE
    DID_NOT_MEET
}